{"componentChunkName":"component---src-templates-blog-post-js","path":"/api-kit/","webpackCompilationHash":"fe2d35b8b798718c46c6","result":{"data":{"site":{"siteMetadata":{"title":"Hello Swift!","author":"David Lin"}},"markdownRemark":{"id":"aefa19c4-1360-5efe-aa9f-fd4b0abf57b2","html":"<h3 id=\"table-of-contents\"><a href=\"#table-of-contents\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h3>\n<ul>\n<li><a href=\"./#basics\">Basics</a></li>\n<li><a href=\"./#networkclient\">NetworkClient</a></li>\n<li><a href=\"./#config\">Config</a></li>\n<li>\n<p><a href=\"./#structure-a-network-request\">Structure a Network Request</a></p>\n<ul>\n<li><a href=\"./#define-request-type\">Define Request Type</a></li>\n<li><a href=\"./#define-request\">Define Request</a></li>\n<li><a href=\"./#decoding\">Decoding</a></li>\n</ul>\n</li>\n<li><a href=\"./#retry-request\">Retry Request</a></li>\n<li>\n<p><a href=\"./#plugins\">Plugins</a></p>\n<ul>\n<li><a href=\"./#header-injection\">Header injection</a></li>\n<li><a href=\"./#access-token-injection\">Access Token Injection</a></li>\n<li><a href=\"./#refresh-token-plugin\">Refresh Token Plugin</a></li>\n<li><a href=\"./#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%80%99%E4%BA%9B-plugins\">如何使用這些 Plugins</a></li>\n</ul>\n</li>\n<li><a href=\"./#oauth-and-restful-together\">OAuth and RESTful together</a></li>\n<li><a href=\"./#rxswift-submodule\">RxSwift Submodule</a></li>\n</ul>\n<h1 id=\"basics\"><a href=\"#basics\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basics</h1>\n<h2 id=\"dependencies\"><a href=\"#dependencies\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependencies</h2>\n<p>APIKit 使用了以下套件來輔助我們抽象化一些複雜的實作，以達到快速開發的目的：</p>\n<ul>\n<li><a href=\"https://github.com/Moya/Moya\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya &#x26; Moya/RxSwift</a>: Help us to structure api code, mocking response data, stubbing network responses.</li>\n<li><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alamofire</a>: HTTP networking library written in Swift.</li>\n<li><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SwiftyJSON</a>: Help us to tranform response data to handful Swift JSON object. Really useful when you just want to take a look at response json.</li>\n<li><a href=\"https://github.com/tristanhimmelman/ObjectMapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObjectMapper</a>: Help us to transform json into Swift model. An alternative option of JSON decoding.</li>\n<li><a href=\"https://github.com/mxcl/PromiseKit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PromiseKit</a>: Promise for Swift.</li>\n<li><a href=\"https://github.com/ReactiveX/RxSwift\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RxSwift</a>: Reactive Programming in Swift</li>\n</ul>\n<h2 id=\"installation\"><a href=\"#installation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h2>\n<h3 id=\"cocoapods\"><a href=\"#cocoapods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cocoapods</h3>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">pod <span class=\"token string\">'APIKit'</span>\npod <span class=\"token string\">'APIKit/RxSwift'</span> <span class=\"token comment\"># if you prefer to use RxSwift extensions</span></code></pre></div>\n<h2 id=\"requirment\"><a href=\"#requirment\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirment</h2>\n<ul>\n<li>Xcode 11.x</li>\n<li>Swift 5.x</li>\n<li>Cocoapods >= 1.4.0</li>\n</ul>\n<h1 id=\"networkclient\"><a href=\"#networkclient\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NetworkClient</h1>\n<p><code class=\"language-text\">NetworkClient</code> 主要的功能是執行 network call，你可以傳入一個 Request，NetworkClient 會依據 Request 中的網址、參數等去打 api，且回傳 Request 中定義好的 Response Type 回來。</p>\n<p>簡單來看一下 <code class=\"language-text\">NetworkClient</code> 內部有什麼東西：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">API</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> `<span class=\"token builtin\">NetworkClient</span>` <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - Property</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">let</span> requestQueue <span class=\"token operator\">=</span> <span class=\"token function\">DispatchQueue</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">:</span> <span class=\"token string\">\"io.api.network_client.request_queue\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// MARK: Initialization</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>provider <span class=\"token operator\">=</span> provider\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">handleErrorResponse</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClientError</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">blockRequestQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      requestQueue<span class=\"token punctuation\">.</span><span class=\"token function\">suspend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">releaseRequestQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      requestQueue<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>每一個 <code class=\"language-text\">NetworkClient</code> 都須傳入一個 <code class=\"language-text\">MoyaProvider&lt;MultiTarget&gt;</code>，這裡的目的是要透過 Moya 來操作網路連線。</li>\n<li>且可以看到 <code class=\"language-text\">NetworkClient</code> 中有一個 <code class=\"language-text\">requestQueue</code>，目的是為了當需要暫停某個 <code class=\"language-text\">NetworkClient</code> 上所有的連線時可以使用的 thread。</li>\n</ul>\n<p>在 APIKit 中，我們提供了一個最基礎的 <code class=\"language-text\">NetworkClient</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">API</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> shared<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NetworkClient</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">PluginType</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">NetworkTrafficPlugin</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>plugins<span class=\"token punctuation\">:</span> plugins<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token function\">NetworkClient</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> provider<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> client\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個 <code class=\"language-text\">NetworkClient</code> 除了 <code class=\"language-text\">MoyaProvider&lt;MultiTarget&gt;</code> 提供的網路連線功能以外，還有偵測連線狀態的功能，當連線開始或結束時，他會在 console 中印出 Request Header, parameters 等資訊。（如果不需要這個功能的話，可以 overload 他，把 plugin 的部分移除即可。）</p>\n<h2 id=\"執行網路連線\"><a href=\"#%E5%9F%B7%E8%A1%8C%E7%B6%B2%E8%B7%AF%E9%80%A3%E7%B7%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>執行網路連線</h2>\n<p>接著我們來看一下如何使用 <code class=\"language-text\">NetworkClient</code> 來執行網路連線：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> request<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">JSON</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> requestQueue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">internal</span> <span class=\"token keyword\">func</span> perform<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Request</span><span class=\"token punctuation\">,</span> on callbackQueue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchQueue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">JSON</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token function\">MultiTarget</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span> <span class=\"token punctuation\">{</span> seal <span class=\"token keyword\">in</span>\n      provider<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> callbackQueue<span class=\"token punctuation\">:</span> callbackQueue<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">switch</span> response <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> r<span class=\"token punctuation\">.</span>statusCode <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">200</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">399</span><span class=\"token punctuation\">:</span>\n              seal<span class=\"token punctuation\">.</span><span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">try</span> <span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n              seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleErrorResponse</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">let</span> e <span class=\"token punctuation\">{</span>\n            seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Moya 定義的 <code class=\"language-text\">TargetType</code> 為最小可以執行網路連線的單位，裡面定義了如 HTTPMethod, endpoint, base url, parameters, headers 等等可能會用在網路連線上的資訊，所以我們要基於 <code class=\"language-text\">TargetType</code> 來寫我們的 api。不過這裡先不提如何使用 <code class=\"language-text\">TargetType</code> 來寫 api，只要知道當我們傳入任意一個 <code class=\"language-text\">TargetType</code> 到 <code class=\"language-text\">NetworkClient</code> 中我們就能執行網路連線，且針對 <code class=\"language-text\">Request</code> 中定義的 <code class=\"language-text\">Response Type</code> 做 <code class=\"language-text\">Decoding</code> 的動作。而且要注意這些 api 都是跑在 <code class=\"language-text\">requestQueue</code> 之中，方便我們之後統一管理 api call。</p>\n<p>且每個 api call 的回傳都是 <code class=\"language-text\">Promise</code>，相信大家對 <code class=\"language-text\">PromiseKit</code> 並不陌生，他能解決掉 callback hell 問題，這裡預設每個 api 都回傳 <code class=\"language-text\">Promise</code>。</p>\n<p>對於任意的 <code class=\"language-text\">TargetType</code> 在我們還沒有定義 <code class=\"language-text\">Response Type</code> 以前，我們還不知道要如何轉型成 Swift Object（我們不知道要使用 Decodable 還是其他第三方套件來轉），所以預設使用 <code class=\"language-text\">SwiftyJSON</code> 來轉換成比較方便使用的 <code class=\"language-text\">JSON</code>，相信大家都知道 Swift 中使用 <code class=\"language-text\">Dictionary</code> 其實有諸多的不便。</p>\n<p>所以我們在想要執行一個 api call 時只需要這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">APIKit</span>\n\n<span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token function\">SomeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>done <span class=\"token punctuation\">{</span> json <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// success with returned json</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// handle error...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"conclusion-of-networkclient\"><a href=\"#conclusion-of-networkclient\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion of NetworkClient</h2>\n<p><code class=\"language-text\">NetworkClient</code> 的職責很簡單：</p>\n<ol>\n<li>傳入一個 <code class=\"language-text\">Request</code>，執行網路連線，回傳定義好的 <code class=\"language-text\">Response Type</code>。</li>\n<li>暫停/回復 thread 上的 api call。</li>\n</ol>\n<h1 id=\"config\"><a href=\"#config\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config</h1>\n<p>很多時候我們會有很多個 server 要連線，可能是 production server 或者是 staging server，且 staging server 可能有好幾台。這時候我們可以這樣定義我們的 server config：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">APIKit</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> config<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Config</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\n\n  <span class=\"token keyword\">enum</span> <span class=\"token builtin\">Config</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> `<span class=\"token keyword\">default</span>`<span class=\"token punctuation\">,</span> staging<span class=\"token punctuation\">,</span> staging_04\n\n    <span class=\"token keyword\">var</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://google.com\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>staging<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://staging.google.com\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>staging_02<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://staging-02.google.com\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> headerAuthSecretKey<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"ya\"</span>\n      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>staging<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"ya-staging\"</span>\n      <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>staging_02<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"ya-staging-04\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>假設我們有一個正式 server 以及兩台測試 server，可以通過過展 API namespace，在 API 底下新增一個 config，且將 server config 寫在 <code class=\"language-text\">Config</code> enum 中，我們要切換 server 時只要更改 <code class=\"language-text\">API.config</code> 即可切換到指定的 server url。</p>\n<p>APIKit 不將這些包入 framework 之中是因為管理 config 的方式不只一種，要視情況調整。</p>\n<h1 id=\"structure-a-network-request\"><a href=\"#structure-a-network-request\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structure a Network Request</h1>\n<p>接著來看一下如何定義一個 network call。</p>\n<h2 id=\"define-request-type\"><a href=\"#define-request-type\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Define Request Type</h2>\n<p>假設我們的 app 會用到 GitHub 的某些 api，我們可以先定義一些最基礎的型態，定義好之後再基於這個型態建立出各個 api call。前面有提到我們使用了 Moya 幫我們做了的一些抽象層，最小的 network call 是 <code class=\"language-text\">TargetType</code>，<code class=\"language-text\">TargetType</code> 這個 protocol 需要時做一些基本的東西比如 base url, endpoint, HTTP method 等來執行一個 network call，現在我們要基於 <code class=\"language-text\">TargetType</code> 再擴展出一個專屬於 GitHub Request 的 Type。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">APIKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Moya</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">GitHubRequestType</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> parameters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">GitHubRequestType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>baseURL <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> sampleData<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> parameters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由於 <code class=\"language-text\">GitHubRequestType</code> 的基底是 <code class=\"language-text\">TargetType</code>，也因為 <code class=\"language-text\">GitHubRequestType</code> 有固定的 url，所以我們可以透過 extension 的方式給他一個固定的 url，且這個 url 可以透過剛才我們宣告的 API.config 來取得（如果 config 有變化，base url 也會跟著更新）。這裡多宣告了 <code class=\"language-text\">parameters: [String : Any]</code> 的原因是 GitHub api 可能會有很多傳遞參數的情況發生，所以多一個 parameters 來存放可能會傳出的參數（這裡要多什麼 Property 可以根據使用狀況來新增）。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>如果你的服務不只使用了 GitHub，可能用到了比如 Unsplash, Pinterest 等等服務，你可以多定義出 <code class=\"language-text\">UnsplashRequestType</code>, <code class=\"language-text\">PinterestRequestType</code>，就可以支援多個服務囉。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"define-request\"><a href=\"#define-request\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Define Request</h2>\n<p>定義好 <code class=\"language-text\">GitHubRequestType</code> 之後我們來看如何定義一個 api call。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">APIKit</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GitHubReqeust</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProfile</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">GitHubRequestType</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"/users/<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>userID<span class=\"token delimiter variable\">)</span></span>\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> method<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Method</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> task<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Task</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>requestPlain <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">let</span> userID<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n      <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>of userID<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>userID <span class=\"token operator\">=</span> userID\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一個最單純的 GET 只要給他要連線的 path（a.k.a endpoint），告訴他連線的方式為 <code class=\"language-text\">.get</code>，這樣就完成定義一個最簡單的 <code class=\"language-text\">Request</code> 了！</p>\n<p>如果要帶上參數的話，就要改 <code class=\"language-text\">Task</code> 中 encoding 方式了，詳情請見 <a href=\"https://github.com/Moya/Moya/blob/master/Sources/Moya/Task.swift\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya/Task.swift</a>。（Multipart 也可以參考）</p>\n<p>你可能會好奇為什麼我要包很多層 struct，為什麼不用官方建議的 enum 方式？有以下幾個原因：</p>\n<ol>\n<li>使用 enum 定義的話當 api 一多，每個 path, method, parameters 就會很分散，這裡我希望一個 struct 就指定一個 api call（當然使用 enum 也可，單純個人偏好）</li>\n<li>使用多層 struct 可以將 namespace 切分出來，不會將所有的 api 集中塞在一個 struct 之中。（當然使用 enum 也可以做到）</li>\n</ol>\n<p>到這裡我們要取得 GitHub 上某位使用者的 profile 就可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">APIKit</span>\n\n<span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">GitHubReqeust</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetProfile</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token string\">\"some_user_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>done <span class=\"token punctuation\">{</span> json <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// success with returned json</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// handle error...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"decoding\"><a href=\"#decoding\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decoding</h2>\n<p>最佳的情況是我們可以固定的將 server 吐給我們的資料轉成 swift object 方便使用，除了可以使用官方提供的 <code class=\"language-text\">Decodable</code> 以外，我發現 <code class=\"language-text\">ObjectMapper</code> 也是不錯的 json decode 工具。所以 <code class=\"language-text\">APIKit</code> 同時支援 <code class=\"language-text\">Decodable</code> 以及 <code class=\"language-text\">ObjectMapper</code>。</p>\n<p>假設剛剛的 <code class=\"language-text\">GetProfile</code> 回傳的 json 可以被轉換成 User Object（不管是使用 <code class=\"language-text\">Decodable</code> 還是 <code class=\"language-text\">ObjectMapper</code>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">ObjectMapper</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\n  <span class=\"token keyword\">enum</span> <span class=\"token builtin\">CodingKeys</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">CodingKey</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> name<span class=\"token punctuation\">,</span> id\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Decodable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>from decoder<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Decoder</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">container</span><span class=\"token punctuation\">(</span>keyedBy<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CodingKeys</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    id <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>且告訴該 Request，他是可以被 decode 的型態，APIKit 提供了兩個 decode 用的 protocol：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">ObjectMapper</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">DecodableResponse</span> <span class=\"token punctuation\">{</span>\n  associatedtype <span class=\"token builtin\">ResponseType</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Decodable</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">MappableResponse</span> <span class=\"token punctuation\">{</span>\n  associatedtype <span class=\"token builtin\">ResponseType</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">BaseMappable</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>只要將其套上 Request：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProfile</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">GitHubRequestType</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">DecodableResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">ResponseType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">User</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// or</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProfile</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">GitHubRequestType</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">MappableResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">ResponseType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">User</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就可以在 network call 完成後自動被轉換為該 object 囉。</p>\n<h1 id=\"retry-request\"><a href=\"#retry-request\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Retry Request</h1>\n<p>如果有些 api 在失敗的時候會需要重試幾次，超過一定次數才會真的失敗的話，APIKit 也提供了一個 protocl：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">RetryableRquest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> retryBehavior<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RepeatBehavior</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">extension</span> <span class=\"token builtin\">RetryableRquest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/// Default to general delay with retry count 3 times, each retry with 2 seconds interval.</span>\n  <span class=\"token keyword\">var</span> retryBehavior<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RepeatBehavior</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProfile</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">GitHubRequestType</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">MappableResponse</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RetryableRquest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>預設的重試次數為兩次，間隔 3 秒，如果需要間隔與次數的變化，可以 overload 該 property，或者是換成其他 retry 的方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token builtin\">RepeatBehavior</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">immediate</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">exponentialDelayed</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> multiplier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">customTimerDelayed</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> delayCalculator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">UInt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">DispatchTimeInterval</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通常比較常使用的是 <code class=\"language-text\">delayed</code> 跟 <code class=\"language-text\">exponentialDelayed</code>，<code class=\"language-text\">exponentialDelayed</code> 為指數避障算法，有興趣者可以自行 google 一下。</p>\n<h1 id=\"plugins\"><a href=\"#plugins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugins</h1>\n<p>會選擇使用 Moya 作為這個框架個基礎是因為我們可以在每個 api call 的前與後做一些手腳，可以看到 <a href=\"https://github.com/Moya/Moya/blob/master/docs/Plugins.md#plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya/Plugin</a> 中提到每個 request 要送出前都可以對其 <code class=\"language-text\">URLRequest</code> 插入一些值，或者在取得 response 時檢查 error code，並且作出處理。</p>\n<p>利用這些特性我們可以簡單地做到 inject header 跟 access token 的效果。</p>\n<h2 id=\"access-token-injection\"><a href=\"#access-token-injection\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access Token Injection</h2>\n<p>參考：<a href=\"https://github.com/Moya/Moya/blob/master/Sources/Moya/Plugins/AccessTokenPlugin.swift\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya/Plugins/AccessTokenPlugin.swift</a></p>\n<p>只要我們需要該 Request 在送出前都加上 access token，我們只要在該 Request 加上 <code class=\"language-text\">AccessTokenAuthorizable</code> 即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProfile</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">GitHubRequestType</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">MappableResponse</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">AccessTokenAuthorizable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"header-injection\"><a href=\"#header-injection\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Header injection</h2>\n<p>同理，如果要加上 Header，也可以參考 <a href=\"https://github.com/Moya/Moya/blob/master/Sources/Moya/Plugins/AccessTokenPlugin.swift\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya/Plugins/AccessTokenPlugin.swift</a>，或者參考 APIKit 中的 <code class=\"language-text\">HeaderInjectingPlugin</code>。</p>\n<p>你可以透過這個 plugin 來插入一些 header fields：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> sharedd<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NetworkClient</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> headerInjectingPlugin <span class=\"token operator\">=</span> <span class=\"token function\">HeaderInjectingPlugin</span><span class=\"token punctuation\">(</span>headerClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> target <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"x-auth-token\"</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>xAuthToken<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"app-version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.2.3\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"platform\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"iOS\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">PluginType</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token builtin\">NetworkTrafficPlugin</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    headerInjectingPlugin\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>plugins<span class=\"token punctuation\">:</span> plugins<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token function\">NetworkClient</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> provider<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> client\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"refresh-token-plugin\"><a href=\"#refresh-token-plugin\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refresh Token Plugin</h2>\n<p>APIKit 提供了一個 <code class=\"language-text\">RefreshTokenPlugin</code> 來幫助處理 refresh access token 問題，在處理 refresh token ˊ之前，會建議先了解 OAuth 2.0 的 refresh token 具體是在做什麼的。</p>\n<p>Refresh token 有一些特性我們要先了解：</p>\n<ol>\n<li>refresh token 只能使用一次，且一次只能有一個 refresh request 執行（如果一次打兩個以上的 refresh request 出去，就會有問題）</li>\n<li>access token 有時效性，只要超過時效，就必須使用 refresh token 去換新的 access token（甚至有些 refresh token 也有時效性，但 refresh token 時效要比 access token 還要長）</li>\n<li>refresh 可能會失效（可能 timeout、可能是對方 server 壞掉，這些 edge case 很罕見，可以斟酌情況處理）</li>\n<li>api 失敗後要看 server 定義了 401 還是 403 為 unauthorized，取得某些特定 error code 才觸發 refresh</li>\n<li>在 refresh 同時，api call 全部暫停（切記 refresh plugin 只會將該 network client 上的所有 api 暫停，如果你有多個 client，並不會全部都暫停）</li>\n<li>在 success 後要記得更新 access token 到你存放 token 的地方，不然你會一直用舊的 token 在做驗證</li>\n<li>由於某些情況下會觸發很多 401 的 error（比如你打了 3 個 api，全部拿到 401 error code，其中有一個 api 先完成，且觸發 refresh，其他兩個在 10 秒後才帶著 401 error code 回來，這時候還會觸發一次 refresh request，為了處理這個狀況，在 refresh 成功後 60 秒內，我會 100% 相信當前的 token 為有效 token，然後忽略所有的 401 error code）</li>\n</ol>\n<p>如果有些特殊的狀況要處理，建議可以自己寫一個客製化的 plugin 來處理。</p>\n<h2 id=\"如何使用這些-plugins\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%80%99%E4%BA%9B-plugins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用這些 Plugins</h2>\n<p>如果要使用 Plugin 的話我們要對 NetworkClient 做一點手腳（以下這個 client 就加入了四個不同效果的 plugin）：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> shared<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NetworkClient</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> refreshPlugin <span class=\"token operator\">=</span> <span class=\"token function\">RefreshTokenPlugin</span><span class=\"token punctuation\">(</span>\n            checkRefreshTokenValidLengthClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            triggerRefreshClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            refreshRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SampleReqeust</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Auth</span><span class=\"token punctuation\">.</span><span class=\"token function\">RefreshAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            successToRefreshClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> json <span class=\"token keyword\">in</span> accessToken <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"after refresh\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            failToRefreshClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> error <span class=\"token keyword\">in</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> xAuthHeaderInjectingPlugin <span class=\"token operator\">=</span> <span class=\"token function\">XAuthHeaderInjectingPlugin</span><span class=\"token punctuation\">(</span>xAuthHeaderClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> target <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>xAuthToken\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">PluginType</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token builtin\">NetworkTrafficPlugin</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            xAuthHeaderInjectingPlugin<span class=\"token punctuation\">,</span>\n            refreshPlugin<span class=\"token punctuation\">,</span>\n            <span class=\"token function\">AccessTokenProvidingPlugin</span><span class=\"token punctuation\">(</span>tokenClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> accessToken\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>plugins<span class=\"token punctuation\">:</span> plugins<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token function\">NetworkClient</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> provider<span class=\"token punctuation\">)</span>\n        refreshPlugin<span class=\"token punctuation\">.</span>networkClientRef <span class=\"token operator\">=</span> client\n        <span class=\"token keyword\">return</span> client\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>我們可以 overload 原有的 <code class=\"language-text\">shared</code> <code class=\"language-text\">NetworkClient</code>，或者再新增另外一個 <code class=\"language-text\">NetworkClient</code>。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1 id=\"oauth-and-restful-together\"><a href=\"#oauth-and-restful-together\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OAuth and RESTful together</h1>\n<p>搭配上面的 <code class=\"language-text\">RefreshTokenPlugin</code> 跟 <code class=\"language-text\">RetryableRquest</code>，我們可以讓每一個 request 在拿到 401 的同時觸發 refresh request 且 retry 原本的 request，進而達到無縫換 token 的效果。</p>\n<h1 id=\"rxswift-submodule\"><a href=\"#rxswift-submodule\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RxSwift Submodule</h1>\n<p>如果你習慣使用 RxSwift，我們也提供了 RxSwift 的擴展，這些擴展支援上述的所有功能包含 decoding, retry。</p>\n<p>你可以透過 Cocoapods 安裝：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">pod <span class=\"token string\">'APIKit/RxSwift'</span></code></pre></div>","timeToRead":10,"frontmatter":{"title":"RESTful API and OAuth 2.0","date":"November 20, 2019","spoiler":"How we structure our network layer"},"fields":{"slug":"/api-kit/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/api-kit/","previous":{"fields":{"slug":"/cocoapods-resources/","langKey":"en","directoryName":"cocoapods-resources","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Cocoapods Resources Management?"}},"next":null,"translations":[],"translatedLinks":[]}}}