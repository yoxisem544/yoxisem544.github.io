{"componentChunkName":"component---src-templates-blog-post-js","path":"/api-how-to-use-it/","webpackCompilationHash":"fe2d35b8b798718c46c6","result":{"data":{"site":{"siteMetadata":{"title":"Hello Swift!","author":"David Lin"}},"markdownRemark":{"id":"5847e670-33af-56b3-b47e-2fe4cc0ec101","html":"<h1 id=\"basics\"><a href=\"#basics\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basics</h1>\n<h4 id=\"dependencies\"><a href=\"#dependencies\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependencies</h4>\n<p>These third party dependencies were used to help us write structured API code in Swift</p>\n<ul>\n<li><a href=\"https://github.com/Moya/Moya\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya &#x26; Moya/RxSwift</a>: Help us to structure api code, mocking response data, stubbing network responses.</li>\n<li><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alamofire</a>: HTTP networking library written in Swift.</li>\n<li><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SwiftyJSON</a>: Help us to tranform response data to handful Swift JSON object. Really useful when you just want to take a look at response json.</li>\n<li><a href=\"https://github.com/tristanhimmelman/ObjectMapper\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObjectMapper</a>: Help us to transform json into Swift model. An alternative option of JSON decoding.</li>\n<li><a href=\"https://github.com/mxcl/PromiseKit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PromiseKit</a>: Promise for Swift.</li>\n<li><a href=\"https://github.com/ReactiveX/RxSwift\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RxSwift</a>: Reactive Programming in Swift</li>\n</ul>\n<h3 id=\"file-structure\"><a href=\"#file-structure\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File Structure</h3>\n<p>At the very beginning, we have to define a “Request” for our Restful API. Currently, we’re working on SCM project, so let’s name our request <code class=\"language-text\">KKdaySCMRequest</code>. In this file, we will import <code class=\"language-text\">Moya</code> to help us setup some information that api needed.</p>\n<p>We all know url, method, header, parameters are needed to make a api call. <code class=\"language-text\">TargetType</code> is here to help us out! Let’s define a protocol called <code class=\"language-text\">KKdaySCMRequestType</code> that conforms to <code class=\"language-text\">TargetType</code>, and give it some default values like <code class=\"language-text\">baseURL</code>. Values like <code class=\"language-text\">headers</code>, <code class=\"language-text\">parameters</code>, <code class=\"language-text\">sampleData</code> will be returning nothing now, we will <code class=\"language-text\">overload</code> these properties later when we start writing our api codes.</p>\n<p>Next, define a empty <code class=\"language-text\">struct</code> named ”<code class=\"language-text\">KKdaySCMRequest</code>”, all our api codes will be structured inside this <code class=\"language-text\">struct</code> later.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Moya</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">KKdaySCMRequestType</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> parameters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">KKdaySCMRequestType</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> baseURL<span class=\"token punctuation\">:</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://fake-api.kkday.com/api/v1/\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> sampleData<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> parameters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">KKdaySCMRequest</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"create-a-new-api-request\"><a href=\"#create-a-new-api-request\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a new API request</h3>\n<h4 id=\"about-response\"><a href=\"#about-response\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About response</h4>\n<p>Assume that we are fetching a product list from our server. Server response will be like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0000\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"desc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"some description from server...\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"products\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Macbook Pro\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2499</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Macbook Air\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1799</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>metadata: message from server, will tell you more about this response. (To see what exactly is going on on response.)</li>\n<li>data: actual json response.</li>\n</ul>\n<h4 id=\"how-to-extend-namespace\"><a href=\"#how-to-extend-namespace\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to extend namespace</h4>\n<p>We hope in <code class=\"language-text\">KKdaySCMRequest</code> namespace, there is another namespace called <code class=\"language-text\">Products</code> for all our product apis structured inside it. What we will do here is to extend <code class=\"language-text\">KKdaySCMRequest</code>, create a new <code class=\"language-text\">struct</code> called <code class=\"language-text\">Products</code>.</p>\n<p>Let’s try to write api code for request above:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">KKdaySCMRequest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token builtin\">Products</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> subpath <span class=\"token operator\">=</span> <span class=\"token string\">\"products/\"</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProductList</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KKdaySCMRequestType</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> subpath <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> method<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Method</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> task<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Task</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span>requestPlain <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By conform to <code class=\"language-text\">KKdaySCMRequestType</code> protocol, we will have a default baseURL. We will have to do several things:</p>\n<ol>\n<li><strong>path</strong>: endpoint of this api.</li>\n<li><strong>method</strong>: HTTP methods like GET/POST/PATCH/PUT/DELETE.</li>\n<li><strong>task</strong>: Moya defined some handy methods for us to make a api call, a plain request, request with parameters, or even multipart request can be indicated right here. see more about <a href=\"https://github.com/Moya/Moya/blob/master/Sources/Moya/Task.swift\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya/Task.swift</a>.</li>\n</ol>\n<h4 id=\"making-an-api-call\"><a href=\"#making-an-api-call\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making an api call</h4>\n<p>We have defined our new <code class=\"language-text\">&quot;Get product list&quot;</code> request. So, what’s next?</p>\n<p><code class=\"language-text\">MoyaProvider</code> is here to do our <code class=\"language-text\">&quot;network job&quot;</code>. When using Moya, we make all API requests through a MoyaProvider instance, passing in a value of our predefined <code class=\"language-text\">KKdaySCMRequest</code> that specifies which endpoint we want to call.</p>\n<p>Here, we would like to have another namespace <code class=\"language-text\">API</code> to expose a wrapper and an entry for our API requests.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">API</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token builtin\">NetworkClientError</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">clientSideError</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ServerErrorMessage</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">serverSideError</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ServerErrorMessage</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> undefinedError\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/// Wrapper to help us interact with moya provider.</span>\n  <span class=\"token comment\">/// All networking jobs happened here.</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// MARK: - Property</span>\n    <span class=\"token comment\">/// All API request will be executed on this background thread</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">let</span> requestQueue <span class=\"token operator\">=</span> <span class=\"token function\">DispatchQueue</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">:</span> <span class=\"token string\">\"io.api.network_client.request_queue\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// MARK: Initialization</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>provider <span class=\"token operator\">=</span> provider\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">handleErrorResponse</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClientError</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ServerErrorMessage</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">switch</span> r<span class=\"token punctuation\">.</span>statusCode <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">400</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">499</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClientError</span><span class=\"token punctuation\">.</span><span class=\"token function\">clientSideError</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">:</span> message<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">500</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">599</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClientError</span><span class=\"token punctuation\">.</span><span class=\"token function\">serverSideError</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">:</span> message<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClientError</span><span class=\"token punctuation\">.</span>undefinedError\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">blockRequestQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      requestQueue<span class=\"token punctuation\">.</span><span class=\"token function\">suspend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// you're able to suspend all api calls by suspending request thread</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">releaseRequestQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      requestQueue<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/// Default api client</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> shared<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NetworkClient</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token function\">NetworkClient</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> provider<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> client\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// API singleton</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will go deeper to <code class=\"language-text\">API.NetworkClientError</code> and <code class=\"language-text\">requestQueue</code> later, let’s first finish our <code class=\"language-text\">NetworkClient</code> now.\n<code class=\"language-text\">NetworkClient</code> will be able to handle all requests conformed to <code class=\"language-text\">TargetType</code>. We will encounter a problem here, we do not know how to deal with response data returned from an API call. What we will do here is to use <code class=\"language-text\">SwiftyJSON</code> to just transform response data into SwiftyJSON <code class=\"language-text\">JSON object</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// MARK: - General Decoding with SwiftyJSON</span>\n<span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> request<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">JSON</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> requestQueue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">internal</span> <span class=\"token keyword\">func</span> perform<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Request</span><span class=\"token punctuation\">,</span> on callbackQueue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchQueue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">JSON</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token function\">MultiTarget</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span> <span class=\"token punctuation\">{</span> seal <span class=\"token keyword\">in</span>\n      provider<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> callbackQueue<span class=\"token punctuation\">:</span> callbackQueue<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">switch</span> response <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> r<span class=\"token punctuation\">.</span>statusCode <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">200</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">399</span><span class=\"token punctuation\">:</span>\n              seal<span class=\"token punctuation\">.</span><span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">try</span> <span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n              seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleErrorResponse</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">let</span> e <span class=\"token punctuation\">{</span>\n            seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Note:\nShould not use <code class=\"language-text\">perform(_:, on:)</code> method directly, use <code class=\"language-text\">request(_:)</code> instead.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Now, we have <code class=\"language-text\">NetworkClient</code> to do networking job for us, we are able to make our api call now.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">KKdaySCMRequest</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Products</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetProductList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// success!</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// api call failed, handle error here.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"creating-models\"><a href=\"#creating-models\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Models</h3>\n<p>We should not use <code class=\"language-text\">SwiftyJSON</code> for every api in our project, cause it not meaningful enough for us human to read whether its a product list response or other response. <code class=\"language-text\">ObjectMapper</code> will be a good option for json decoding here. (You can also use <code class=\"language-text\">Decodable</code> if you wish to.)</p>\n<p>Let’s recap server response above, we will have metadata and data from server response. We’ll define <code class=\"language-text\">Metadata</code> first:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">ObjectMapper</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Metadata</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> status<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">let</span> desc<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">Metadata</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span>\n    desc <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"desc\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With <code class=\"language-text\">ObjectMapper</code>, we got a handy mapping method to create a swift object.</p>\n<p>Next, server returns a list of products inside <code class=\"language-text\">data</code> field, let’s define a <code class=\"language-text\">Product</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Product</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">let</span> price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">Product</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then structured these two properties inside a response object:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProductListResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> metadata<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Metadata</span>\n  <span class=\"token keyword\">let</span> products<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Product</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">GetProductListResponse</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    metadata <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"metadata\"</span><span class=\"token punctuation\">)</span>\n    products <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"products\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"indicates-decoding-response-type\"><a href=\"#indicates-decoding-response-type\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indicates Decoding Response Type</h3>\n<h4 id=\"decode-using-objectmapper\"><a href=\"#decode-using-objectmapper\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decode using ObjectMapper</h4>\n<p>In order to let <code class=\"language-text\">NetworkClient</code> know if we’ve defined a decoding method in our <code class=\"language-text\">KKdaySCMRequest</code>, we will have to define a protocol with an <code class=\"language-text\">associatedtype</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">MappableResponse</span> <span class=\"token punctuation\">{</span>\n  associatedtype <span class=\"token builtin\">ResponseType</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By pluging <code class=\"language-text\">MappableResponse</code> to any <code class=\"language-text\">KKdaySCMRequestType</code>, tell that api what <code class=\"language-text\">ResponseType</code> is. After Indicating <code class=\"language-text\">ResponseType</code>, we will get object we defined above instead of SwiftyJSON type response.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">KKdaySCMRequest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token builtin\">Products</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProductList</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KKdaySCMRequestType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">MappableResponse</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">ResponseType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">GetProductListResponse</span>\n\n      <span class=\"token keyword\">var</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> subpath <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> method<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Method</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">var</span> task<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Task</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span>requestPlain <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"decode-using-decodable\"><a href=\"#decode-using-decodable\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decode using Decodable</h4>\n<p>If you prefer to use <code class=\"language-text\">Decodable</code> to decode json, you will need to conform your model to <code class=\"language-text\">Decodable</code> and implement what’s required by <code class=\"language-text\">Decodable</code> protocol. Then plug <code class=\"language-text\">DecodableResponse</code> to your API request:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">DecodableResponse</span> <span class=\"token punctuation\">{</span>\n  associatedtype <span class=\"token builtin\">ResponseType</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Decodable</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">GetProductListResponse</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Decodable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">KKdaySCMRequest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token builtin\">Products</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProductList</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KKdaySCMRequestType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">DecodableResponse</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">ResponseType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">GetProductListResponse</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>(<strong>You can skip this part</strong>)</p>\n<p>How does <code class=\"language-text\">NetworkClient</code> know if <code class=\"language-text\">KKdaySCMRequestType</code> contains decoding information indicates in <code class=\"language-text\">MappableResponse</code>? We need to give <code class=\"language-text\">NetworkClient</code> a hand.</p>\n<blockquote>\n<blockquote>\n<p>extend Moya’s Response, make it able to map directly to <code class=\"language-text\">ImmutableMappable</code> or <code class=\"language-text\">BaseMappable</code>.</p>\n</blockquote>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Response</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token builtin\">map</span><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> type<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MapContext</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> T <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mapper <span class=\"token operator\">=</span> <span class=\"token builtin\">Mapper</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">JSONObject</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">try</span> <span class=\"token function\">mapJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token builtin\">map</span><span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Sequence</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> type<span class=\"token punctuation\">:</span> S<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MapContext</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">where</span> S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mapper <span class=\"token operator\">=</span> <span class=\"token builtin\">Mapper</span><span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">mapArray</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">JSONObject</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">try</span> <span class=\"token function\">mapJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">Response</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token builtin\">map</span><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> <span class=\"token builtin\">BaseMappable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> type<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MapContext</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> T <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mapper <span class=\"token operator\">=</span> <span class=\"token builtin\">Mapper</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">JSONObject</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">mapJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token builtin\">MoyaError</span><span class=\"token punctuation\">.</span><span class=\"token function\">jsonMapping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token builtin\">map</span><span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Sequence</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> type<span class=\"token punctuation\">:</span> S<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MapContext</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">where</span> S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">BaseMappable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mapper <span class=\"token operator\">=</span> <span class=\"token builtin\">Mapper</span><span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">.</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">mapArray</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">JSONObject</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">mapJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token builtin\">MoyaError</span><span class=\"token punctuation\">.</span><span class=\"token function\">jsonMapping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<blockquote>\n<p>We will have to tell <code class=\"language-text\">NetworkClient</code> to use another <code class=\"language-text\">perform(_:, on:)</code> if generic <code class=\"language-text\">Request</code> matches <code class=\"language-text\">TargetType &amp; MappableResponse</code> protocols.</p>\n</blockquote>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">internal</span> <span class=\"token keyword\">func</span> perform<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">MappableResponse</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Request</span><span class=\"token punctuation\">,</span> on callbackQueue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchQueue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">ResponseType</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token function\">MultiTarget</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span> <span class=\"token punctuation\">{</span> seal <span class=\"token keyword\">in</span>\n      provider<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> callbackQueue<span class=\"token punctuation\">:</span> callbackQueue<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">switch</span> response <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">// check status code if 200~399, 200~299 is success status, 300~399 is for redirect</span>\n            <span class=\"token keyword\">switch</span> r<span class=\"token punctuation\">.</span>statusCode <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">200</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">399</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">ResponseType</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n              seal<span class=\"token punctuation\">.</span><span class=\"token function\">fulfill</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n              seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleErrorResponse</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">let</span> e <span class=\"token punctuation\">{</span>\n            seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          seal<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">func</span> request<span class=\"token operator\">&lt;</span>R<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">MappableResponse</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> R<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>R<span class=\"token punctuation\">.</span><span class=\"token builtin\">ResponseType</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> requestQueue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(<strong>You can skip this part</strong>)</p>\n<hr>\n<h3 id=\"multipart-upload\"><a href=\"#multipart-upload\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multipart Upload</h3>\n<p>see: <a href=\"https://www.google.com/search?q=moya+multipart&#x26;oq=moya+multipart+&#x26;aqs=chrome..69i57.3420j0j4&#x26;sourceid=chrome&#x26;ie=UTF-8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya: Multipart upload</a></p>\n<hr>\n<h3 id=\"error-handling\"><a href=\"#error-handling\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Handling</h3>\n<p>We’ve defined <code class=\"language-text\">ServerErrorMessage</code> above. Here, we will dive into how to handle errors from api. These are errors we might get while api fails:</p>\n<ol>\n<li>Timeout or no network</li>\n<li>Decoding error</li>\n<li>Server error like 400 or 500</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">ServerErrorMessage</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> metadata<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Metadata</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">ServerErrorMessage</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">ImmutableMappable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n        metadata <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"metadata\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">KKdaySCMRequest</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Products</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetProductList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// success!</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">switch</span> e <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">clientSideError</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> statusCode<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">:</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// status code emit from this error will be bound in 400~499</span>\n      <span class=\"token comment\">// message will be a wrapper of Metadata, more information from server will be wrapped inside it</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">serverSideError</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> statusCode<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">:</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// status code emit from this error will be bound in 500~599</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">is</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>undefinedError<span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// unknown error</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">is</span> <span class=\"token builtin\">DecodableError</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">ObjectMapperError</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// known decoding errors...</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// unknown error</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"advanced-usage\"><a href=\"#advanced-usage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Usage</h2>\n<h3 id=\"retry\"><a href=\"#retry\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Retry</h3>\n<p>Sometimes, user will be in a bad network environment with huge package lost rate or latency. API calls usually failed few times in such condition. In order to make error rate a bit lower, we wish api calls are able to retry few times before it error out. To make api requests have ability to retry, we need another protocol here:</p>\n<p>We will need 2 properties here:</p>\n<ol>\n<li>retryInterval: interval between each retry.</li>\n<li>retryCount: how many time should we retry before error out.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">RetryableRquest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> retryInterval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchTimeInterval</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> retryCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">RetryableRquest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> retryInterval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchTimeInterval</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> retryCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With <code class=\"language-text\">RetryableRquest</code> protocol, just plug it to API request that is required for retrying:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">KKdaySCMRequest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token builtin\">Products</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token builtin\">GetProductList</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">KKdaySCMRequestType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">DecodableResponse</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">RetryableRquest</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">ResponseType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">GetProductListResponse</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>(<strong>You can skip this part</strong>)</p>\n<p>In order to make api retryable, we need to tell <code class=\"language-text\">NetworkClient</code> how to do the job:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> request<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">RetryableRquest</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> retryingRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">JSON</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span>maximumRetryCount<span class=\"token punctuation\">:</span> retryingRequest<span class=\"token punctuation\">.</span>retryCount<span class=\"token punctuation\">,</span> delayBeforeRetry<span class=\"token punctuation\">:</span> retryingRequest<span class=\"token punctuation\">.</span>retryInterval<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>retryingRequest<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>requestQueue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">func</span> request<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">MappableResponse</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">RetryableRquest</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> retryingRequest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Request</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">ResponseType</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span>maximumRetryCount<span class=\"token punctuation\">:</span> retryingRequest<span class=\"token punctuation\">.</span>retryCount<span class=\"token punctuation\">,</span> delayBeforeRetry<span class=\"token punctuation\">:</span> retryingRequest<span class=\"token punctuation\">.</span>retryInterval<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>retryingRequest<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>requestQueue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>more about <a href=\"https://github.com/mxcl/PromiseKit/blob/master/Documentation/CommonPatterns.md#retry--polling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PromiseKit/Attempt</a></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>(<strong>You can skip this part</strong>)</p>\n<hr>\n<h3 id=\"rx-retry\"><a href=\"#rx-retry\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rx Retry</h3>\n<p>Implemented…</p>\n<h3 id=\"plugins\"><a href=\"#plugins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugins</h3>\n<p>Moya has a powerful tool called <code class=\"language-text\">&quot;PluginType&quot;</code>, allows us to do pre/post process to a request.\nsee more: <a href=\"https://github.com/Moya/Moya/blob/master/docs/Plugins.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya/PluginType</a></p>\n<h4 id=\"injecting-x-auth-token-to-all-kkdayscmrequests\"><a href=\"#injecting-x-auth-token-to-all-kkdayscmrequests\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Injecting x-auth-token to all KKdaySCMRequests</h4>\n<p>We will have to add a new protocol <code class=\"language-text\">XAuthHeaderInjecting</code>. By conforming to <code class=\"language-text\">XAuthHeaderInjecting</code> protocol, we can check if request needs to inject <code class=\"language-text\">x-auth-token</code> to its <code class=\"language-text\">header field</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Moya</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">XAuthHeaderInjecting</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XAuthHeaderInjectingPlugin</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">PluginType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">URLRequest</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">URLRequest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> multiTarget <span class=\"token operator\">=</span> target <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">MultiTarget</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token builtin\">MultiTarget</span><span class=\"token punctuation\">.</span><span class=\"token function\">target</span><span class=\"token punctuation\">(</span>actualTarget<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> multiTarget <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> actualTarget <span class=\"token keyword\">is</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">KKdayRequestType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">XAuthHeaderInjecting</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// inject x-auth header here</span>\n        <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> request <span class=\"token comment\">// mutabable copy of request</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-auth-token-will-be-here\"</span><span class=\"token punctuation\">,</span> forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"x-auth-token\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> request\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> request\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we have to make <code class=\"language-text\">KKdaySCMRequestType</code> conforms to <code class=\"language-text\">XAuthHeaderInjecting</code> protocol.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">KKdaySCMRequestType</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">TargetType</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">XAuthHeaderInjecting</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"oauth--refresh-token\"><a href=\"#oauth--refresh-token\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OAuth &#x26; Refresh Token</h3>\n<p>Server does not have refresh token now, but refresh plugin is ready.</p>\n<hr>\n<h2 id=\"testing\"><a href=\"#testing\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing</h2>\n<p>Moya provide us some handy ways to do stubbing or injecting mock data for test perpose.\nsee more: <a href=\"https://github.com/Moya/Moya/blob/master/docs/Testing.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moya/Testing</a></p>\n<p>Let’s take a closer look at <code class=\"language-text\">MoyaProvider</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>endpointClosure<span class=\"token punctuation\">:</span> @escaping <span class=\"token builtin\">EndpointClosure</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token punctuation\">.</span>defaultEndpointMapping<span class=\"token punctuation\">,</span>\n            requestClosure<span class=\"token punctuation\">:</span> @escaping <span class=\"token builtin\">RequestClosure</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token punctuation\">.</span>defaultRequestMapping<span class=\"token punctuation\">,</span>\n            stubClosure<span class=\"token punctuation\">:</span> @escaping <span class=\"token builtin\">StubClosure</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token punctuation\">.</span>neverStub<span class=\"token punctuation\">,</span>\n            callbackQueue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchQueue</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span>\n            manager<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Manager</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Target</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultAlamofireManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">PluginType</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            trackInflights<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"mock-data\"><a href=\"#mock-data\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mock Data</h3>\n<p>We have see what <code class=\"language-text\">callbackQueue</code> and <code class=\"language-text\">plugins</code> can do previously. Do you see <code class=\"language-text\">endpointClosure</code> and <code class=\"language-text\">stubClosure</code>? We can inject <code class=\"language-text\">mock data</code> and <code class=\"language-text\">fake status code</code> to <code class=\"language-text\">endpointClosure</code> by providing <code class=\"language-text\">Endpoint</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">makeMockDataClosure</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> mockData<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">MultiTarget</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Endpoint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MultiTarget</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Endpoint</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Endpoint</span><span class=\"token punctuation\">(</span>\n      url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>absoluteString<span class=\"token punctuation\">,</span>\n      sampleResponseClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token function\">networkResponse</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">,</span> mockData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n      task<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">,</span>\n      httpHeaderFields<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">.</span>headers\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"simulates-real-world-networking\"><a href=\"#simulates-real-world-networking\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simulates Real World Networking</h3>\n<p>MoyaProvider can simulates a networking delay when we are testing our api codes. This enables us to test api call with a bit response latency or even timeout condition.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">MoyaProvider</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayedStub</span><span class=\"token punctuation\">(</span>responseTime<span class=\"token punctuation\">)</span> <span class=\"token comment\">// return after a delay</span>\n<span class=\"token builtin\">MoyaProvider</span><span class=\"token punctuation\">.</span>immediatelyStub <span class=\"token comment\">// immediately return</span></code></pre></div>\n<h3 id=\"how-do-we-write-test-code\"><a href=\"#how-do-we-write-test-code\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How Do We Write Test Code?</h3>\n<p>We all know that <code class=\"language-text\">NetworkClient</code> do networking job for us, so we will have provide a fake provider to <code class=\"language-text\">NetworkClient</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">StubbingConstructor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mockData<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span> <span class=\"token operator\">=</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> responseTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TimeInterval</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">setSuccess</span><span class=\"token punctuation\">(</span>mockData<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span><span class=\"token punctuation\">,</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> responseTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TimeInterval</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">NetworkClient</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mockDataClosure <span class=\"token operator\">=</span> <span class=\"token function\">makeMockDataClosure</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">,</span> mockData<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> stubClosure <span class=\"token operator\">=</span> <span class=\"token function\">getStubClosure</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> responseTime<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>endpointClosure<span class=\"token punctuation\">:</span> mockDataClosure<span class=\"token punctuation\">,</span> stubClosure<span class=\"token punctuation\">:</span> stubClosure<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">setFailure</span><span class=\"token punctuation\">(</span>mockData<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span><span class=\"token punctuation\">,</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> responseTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TimeInterval</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">NetworkClient</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">NetworkClient</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> mockDataClosure <span class=\"token operator\">=</span> <span class=\"token function\">makeMockDataClosure</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">,</span> mockData<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> stubClosure <span class=\"token operator\">=</span> <span class=\"token function\">getStubClosure</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> responseTime<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MultiTarget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>endpointClosure<span class=\"token punctuation\">:</span> mockDataClosure<span class=\"token punctuation\">,</span> stubClosure<span class=\"token punctuation\">:</span> stubClosure<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Determine if needs a delayed stubbing from given response time</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">getStubClosure</span><span class=\"token punctuation\">(</span>from responseTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TimeInterval</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">MultiTarget</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">StubBehavior</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> responseTime <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayedStub</span><span class=\"token punctuation\">(</span>responseTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">MoyaProvider</span><span class=\"token punctuation\">.</span>immediatelyStub\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function\">makeMockDataClosure</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> mockData<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">MultiTarget</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Endpoint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MultiTarget</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Endpoint</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Endpoint</span><span class=\"token punctuation\">(</span>\n          url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>absoluteString<span class=\"token punctuation\">,</span>\n          sampleResponseClosure<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token function\">networkResponse</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">,</span> mockData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          method<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n          task<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">,</span>\n          httpHeaderFields<span class=\"token punctuation\">:</span> target<span class=\"token punctuation\">.</span>headers\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/// Starts a stubbing api call</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">func</span> <span class=\"token function\">stubbing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">StubbingConstructor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">StubbingConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With <code class=\"language-text\">StubbingConstructor</code>, we can provide mock data, status code and response time to make a fake provider for <code class=\"language-text\">NetworkClient</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token builtin\">KKdaySCMRequest</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Products</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetProductList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// with setSuccess default value, we will have a 0.3 second delay for api to return, status code set to 200.</span>\n<span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">stubbing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSuccess</span><span class=\"token punctuation\">(</span>mockData<span class=\"token punctuation\">:</span> someData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// do some assert...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// do some assert...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","timeToRead":15,"frontmatter":{"title":"API - How to use it","date":"August 29, 2019","spoiler":"User manual of how to wrtie RESTful API 🚕"},"fields":{"slug":"/api-how-to-use-it/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/api-how-to-use-it/","previous":null,"next":{"fields":{"slug":"/testing-file/","langKey":"en","directoryName":"testing-file","maybeAbsoluteLinks":["/testing-file/"]},"frontmatter":{"title":"Testing File"}},"translations":[],"translatedLinks":[]}}}