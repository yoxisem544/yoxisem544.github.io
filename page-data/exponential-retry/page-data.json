{"componentChunkName":"component---src-templates-blog-post-js","path":"/exponential-retry/","webpackCompilationHash":"7598e259f9274edc8972","result":{"data":{"site":{"siteMetadata":{"title":"Hello Swift!","author":"David Lin"}},"markdownRemark":{"id":"f2c7311e-4789-55e5-a28d-0f1e414c6113","html":"<p>Sometimes, errors occur in real world application. For example, api sometimes failed due to network issue, server issue or awkward network condition. In such cases, we would like to retry several times before throwing an error out.</p>\n<h1 id=\"rxswifts-retry\"><a href=\"#rxswifts-retry\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RxSwift’s Retry</h1>\n<p>Let’s take a look at RxSwift’s retry method</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> disposeBag <span class=\"token operator\">=</span> <span class=\"token function\">DisposeBag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> <span class=\"token builtin\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">let</span> sequenceThatErrors <span class=\"token operator\">=</span> <span class=\"token builtin\">Observable</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span>create <span class=\"token punctuation\">{</span> observer <span class=\"token keyword\">in</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🍎\"</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🍐\"</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🍊\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">TestError</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error encountered\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">count</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🐶\"</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🐱\"</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🐭\"</span><span class=\"token punctuation\">)</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Disposables</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nsequenceThatErrors\n    <span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>onNext<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">disposed</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">:</span> disposeBag<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Output:</span>\n<span class=\"token comment\">// 🍎</span>\n<span class=\"token comment\">// 🍐</span>\n<span class=\"token comment\">// 🍊</span>\n<span class=\"token comment\">// Error encountered</span>\n<span class=\"token comment\">// 🍎</span>\n<span class=\"token comment\">// 🍐</span>\n<span class=\"token comment\">// 🍊</span>\n<span class=\"token comment\">// 🐶</span>\n<span class=\"token comment\">// 🐱</span>\n<span class=\"token comment\">// 🐭</span></code></pre></div>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>example of these sample codes are from: <a href=\"https://beeth0ven.github.io/RxSwift-Chinese-Documentation/content/decision_tree/retry.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://beeth0ven.github.io/RxSwift-Chinese-Documentation/content/decision_tree/retry.html</a></p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"rxswiftext\"><a href=\"#rxswiftext\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RxSwiftExt</h2>\n<p>RxSwift provide us a retry method, with <code class=\"language-text\">.retry()</code>, we are able to retry 1 time before throwing error out. Or <code class=\"language-text\">.retry(5)</code> to retry 5 times before error.</p>\n<p>It’s simple and clear. But wait! What if I want 2 seconds before each retry? It seems <code class=\"language-text\">.retry()</code> happened immediately after error occured. Unfortunately, RxSwift does not implement this kind of retry for us. We need to do it ourself.</p>\n<p>Good news is RxSwift has a great community, someone has done these complex retry already! In a third party project called <a href=\"https://github.com/RxSwiftCommunity/RxSwiftExt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RxSwiftExt</a> has a lot handy method to use.</p>\n<h2 id=\"repeatbehavior\"><a href=\"#repeatbehavior\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RepeatBehavior</h2>\n<p>First, we will need a enum with some different retry rules.</p>\n<ol>\n<li><code class=\"language-text\">immediate</code>: Just like what RxSwift gives us.</li>\n<li><code class=\"language-text\">delayed</code>: What we want above, retry with some delay.</li>\n<li><code class=\"language-text\">exponentialDelayed</code>: a bit different from <code class=\"language-text\">delayed</code>, will extend every retry interval after each error.</li>\n<li><code class=\"language-text\">customTimerDelayed</code>: we won’t discuss it here.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">RxSwift</span>\n\n<span class=\"token comment\">/**\nSpecifies how observable sequence will be repeated in case of an error\n- Immediate: Will be immediatelly repeated specified number of times\n- Delayed: Will be repeated after specified delay specified number of times\n- ExponentialDelayed: Will be repeated specified number of times.\nDelay will be incremented by multiplier after each iteration (multiplier = 0.5 means 50% increment)\n- CustomTimerDelayed: Will be repeated specified number of times. Delay will be calculated by custom closure\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token builtin\">RepeatBehavior</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> immediate <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> delayed <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> exponentialDelayed <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span> multiplier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> customTimerDelayed <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> delayCalculator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">UInt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">DispatchTimeInterval</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">RepeatBehavior</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/**\n\tExtracts maxCount and calculates delay for current RepeatBehavior\n\t- parameter currentAttempt: Number of current attempt\n\t- returns: Tuple with maxCount and calculated delay for provided attempt\n\t*/</span>\n\t<span class=\"token keyword\">func</span> <span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> currentRepetition<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchTimeInterval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">immediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\">// if Immediate, return 0.0 as delay</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>never<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\">// return specified delay</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">milliseconds</span><span class=\"token punctuation\">(</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">exponentialDelayed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> initial<span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> multiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\">// if it's first attempt, simply use initial delay, otherwise calculate delay</span>\n\t\t\t<span class=\"token keyword\">let</span> delay <span class=\"token operator\">=</span> currentRepetition <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> initial <span class=\"token punctuation\">:</span> initial <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> multiplier<span class=\"token punctuation\">,</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span>currentRepetition <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">milliseconds</span><span class=\"token punctuation\">(</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>delay <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">customTimerDelayed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> delayCalculator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\">// calculate delay using provided calculator</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">:</span> <span class=\"token function\">delayCalculator</span><span class=\"token punctuation\">(</span>currentRepetition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>With these rules, we can now implement retry with delay! Let’s see the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">RetryPredicate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">ObservableType</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/**\n\tRepeats the source observable sequence using given behavior in case of an error or until it successfully terminated\n\t- parameter behavior: Behavior that will be used in case of an error\n\t- parameter scheduler: Schedular that will be used for delaying subscription after error\n\t- parameter shouldRetry: Custom optional closure for checking error (if returns true, repeat will be performed)\n\t- returns: Observable sequence that will be automatically repeat if error occurred\n\t*/</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> behavior<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RepeatBehavior</span><span class=\"token punctuation\">,</span> scheduler<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SchedulerType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">MainScheduler</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">,</span> shouldRetry<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RetryPredicate</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Observable</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> behavior<span class=\"token punctuation\">:</span> behavior<span class=\"token punctuation\">,</span> scheduler<span class=\"token punctuation\">:</span> scheduler<span class=\"token punctuation\">,</span> shouldRetry<span class=\"token punctuation\">:</span> shouldRetry<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\tRepeats the source observable sequence using given behavior in case of an error or until it successfully terminated\n\t- parameter currentAttempt: Number of current attempt\n\t- parameter behavior: Behavior that will be used in case of an error\n\t- parameter scheduler: Schedular that will be used for delaying subscription after error\n\t- parameter shouldRetry: Custom optional closure for checking error (if returns true, repeat will be performed)\n\t- returns: Observable sequence that will be automatically repeat if error occurred\n\t*/</span>\n\t<span class=\"token keyword\">internal</span> <span class=\"token keyword\">func</span> <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> currentAttempt<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span><span class=\"token punctuation\">,</span> behavior<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RepeatBehavior</span><span class=\"token punctuation\">,</span> scheduler<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SchedulerType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">MainScheduler</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">,</span> shouldRetry<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RetryPredicate</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Observable</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">guard</span> currentAttempt <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token builtin\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// calculate conditions for bahavior</span>\n\t\t\t<span class=\"token keyword\">let</span> conditions <span class=\"token operator\">=</span> behavior<span class=\"token punctuation\">.</span><span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span>currentAttempt<span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token keyword\">return</span> catchError <span class=\"token punctuation\">{</span> error <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Observable</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Element</span><span class=\"token operator\">></span> <span class=\"token keyword\">in</span>\n\t\t\t\t<span class=\"token comment\">// return error if exceeds maximum amount of retries</span>\n\t\t\t\t<span class=\"token keyword\">guard</span> conditions<span class=\"token punctuation\">.</span>maxCount <span class=\"token operator\">></span> currentAttempt <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token builtin\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> shouldRetry <span class=\"token operator\">=</span> shouldRetry<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token function\">shouldRetry</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// also return error if predicate says so</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">guard</span> conditions<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">!=</span> <span class=\"token punctuation\">.</span>never <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// if there is no delay, simply retry</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>currentAttempt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> behavior<span class=\"token punctuation\">:</span> behavior<span class=\"token punctuation\">,</span> scheduler<span class=\"token punctuation\">:</span> scheduler<span class=\"token punctuation\">,</span> shouldRetry<span class=\"token punctuation\">:</span> shouldRetry<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token comment\">// otherwise retry after specified delay</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">Observable</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Void</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delaySubscription</span><span class=\"token punctuation\">(</span>conditions<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">,</span> scheduler<span class=\"token punctuation\">:</span> scheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMapLatest <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>currentAttempt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> behavior<span class=\"token punctuation\">:</span> behavior<span class=\"token punctuation\">,</span> scheduler<span class=\"token punctuation\">:</span> scheduler<span class=\"token punctuation\">,</span> shouldRetry<span class=\"token punctuation\">:</span> shouldRetry<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this extension on <code class=\"language-text\">ObservableType</code>, all observables can use our new retry method!</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">sequenceThatErrors\n    <span class=\"token comment\">// .retry() we don't need this anymore!</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">RepeatBehavior</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>onNext<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">disposed</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">:</span> disposeBag<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h1 id=\"exponential-delay\"><a href=\"#exponential-delay\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exponential Delay</h1>\n<p>We’ve implement retry with fixed interval, what’s next? Are we able to make every retry interval a bit longer if we kept getting an error? Sure, you can! Let’s take a look at <code class=\"language-text\">exponentialDelayed</code>. We will first init a <code class=\"language-text\">exponentialDelayed behavior</code>, then take a look at every retry interval of each retry.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> behavior <span class=\"token operator\">=</span> <span class=\"token builtin\">RepeatBehavior</span><span class=\"token punctuation\">.</span><span class=\"token function\">exponentialDelayed</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> multiplier<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\nbehavior<span class=\"token punctuation\">.</span><span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delay <span class=\"token comment\">// milliseconds(1000)</span>\nbehavior<span class=\"token punctuation\">.</span><span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delay <span class=\"token comment\">// milliseconds(1500)</span>\nbehavior<span class=\"token punctuation\">.</span><span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delay <span class=\"token comment\">// milliseconds(2250)</span>\nbehavior<span class=\"token punctuation\">.</span><span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delay <span class=\"token comment\">// milliseconds(3375)</span>\nbehavior<span class=\"token punctuation\">.</span><span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delay <span class=\"token comment\">// milliseconds(5062)</span></code></pre></div>\n<p>We can see retry interval keeps growing after each retry. This is the difference between <code class=\"language-text\">exponentialDelayed</code> and <code class=\"language-text\">delayed</code> behavior.</p>\n<hr>\n<h1 id=\"promisekit-common-pattern-attempt\"><a href=\"#promisekit-common-pattern-attempt\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PromiseKit common pattern: Attempt</h1>\n<p>PromiseKit’s common pattern: <a href=\"https://github.com/mxcl/PromiseKit/blob/master/Documentation/CommonPatterns.md#retry--polling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Retry/Polling</a> provides us a attempt method for promise retry.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> attempt<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>maximumRetryCount<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> delayBeforeRetry<span class=\"token punctuation\">:</span> <span class=\"token builtin\">DispatchTimeInterval</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> body<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> attempts <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        attempts <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>recover <span class=\"token punctuation\">{</span> error <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> attempts <span class=\"token operator\">&lt;</span> maximumRetryCount <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> error <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span>delayBeforeRetry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>on<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> attempt<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span>maximumRetryCount<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">flakeyTask</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">:</span> foo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>then <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//…</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// we attempted three times but still failed</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-can-we-add-exponentialdelayed-to-promisekit\"><a href=\"#how-can-we-add-exponentialdelayed-to-promisekit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How can we add <code class=\"language-text\">exponentialDelayed</code> to PromiseKit?</h3>\n<p>It’s easy! Just replace <code class=\"language-text\">maximumRetryCount</code> and <code class=\"language-text\">delayBeforeRetry</code> with <code class=\"language-text\">RepeatBehavior</code>!</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> attempt<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> behavior<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RepeatBehavior</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> body<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> attempts<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        attempts <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> behavior<span class=\"token punctuation\">.</span><span class=\"token function\">calculateConditions</span><span class=\"token punctuation\">(</span>attempts<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">guard</span> attempts <span class=\"token operator\">&lt;</span> maxCount <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> error <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>on<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> attempt<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> behavior <span class=\"token operator\">=</span> <span class=\"token builtin\">RepeatBehavior</span><span class=\"token punctuation\">.</span><span class=\"token function\">exponentialDelayed</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> multiplier<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span>behavior<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">flakeyTask</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">:</span> foo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>then <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//…</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// we attempted three times but still failed</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":6,"frontmatter":{"title":"How to implement exponential retry?","date":"September 09, 2019","spoiler":"Ways PromiseKit and RxSwift provided don't always fits our need"},"fields":{"slug":"/exponential-retry/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/exponential-retry/","previous":{"fields":{"slug":"/lets-talk-about-oauth-refresh-token/","langKey":"en","directoryName":"lets-talk-about-oauth-refresh-token","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Let's talk about OAuth Refresh Token"}},"next":{"fields":{"slug":"/thread-safety-in-ios/","langKey":"en","directoryName":"thread-safety-in-ios","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Thread Safety in iOS"}},"translations":[],"translatedLinks":[]}}}